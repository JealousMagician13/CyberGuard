"use client"

import type React from "react"

import { useState, useRef } from "react"
import { scanForMalware } from "../actions/malware"
import PageHeader from "@/components/page-header"
import ResultCard from "@/components/result-card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertTriangle, FileIcon, Globe, Loader2, ShieldAlert, ShieldCheck } from "lucide-react"

export default function MalwareDetection() {
  const [activeTab, setActiveTab] = useState("url")
  const [url, setUrl] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [isUploading, setIsUploading] = useState(false)
  const [result, setResult] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleScanUrl = async () => {
    if (!url.trim()) return

    setIsScanning(true)
    setError(null)

    try {
      const response = await scanForMalware(url, false)

      if (response.success) {
        setResult(response.analysis)
      } else {
        setError(response.error)
      }
    } catch (err) {
      setError("Failed to scan URL. Please try again.")
    } finally {
      setIsScanning(false)
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setIsUploading(true)
    setError(null)

    try {
      // Create form data
      const formData = new FormData()
      formData.append("file", file)

      // Upload file
      const uploadResponse = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      })

      if (!uploadResponse.ok) {
        const errorData = await uploadResponse.json()
        throw new Error(errorData.error || "Failed to upload file")
      }

      const uploadData = await uploadResponse.json()

      if (!uploadData.success || !uploadData.fileId) {
        throw new Error("Failed to process file")
      }

      // Scan the uploaded file
      setIsScanning(true)
      setIsUploading(false)

      const scanResponse = await scanForMalware(uploadData.fileId, true)

      if (scanResponse.success) {
        setResult(scanResponse.analysis)
      } else {
        setError(scanResponse.error)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to scan file")
    } finally {
      setIsScanning(false)
      setIsUploading(false)
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = ""
      }
    }
  }

  const getResultStatus = () => {
    if (!result) return "idle"

    if (result.riskLevel === "clean") {
      return "success"
    } else if (result.riskLevel === "suspicious") {
      return "warning"
    } else {
      return "error"
    }
  }

  const getRecommendations = () => {
    if (!result) return []

    const isFile = !!result.file

    if (result.riskLevel === "clean") {
      return [`This ${isFile ? "file" : "URL"} appears to be clean.`, "Always verify files from trusted sources."]
    } else if (result.riskLevel === "suspicious") {
      return [
        `This ${isFile ? "file" : "URL"} has some suspicious indicators.`,
        `Do not ${isFile ? "open this file" : "visit this URL"} unless you trust the source.`,
        "Consider using additional security tools for verification.",
      ]
    } else {
      return [
        `This ${isFile ? "file" : "URL"} has been flagged as malicious.`,
        `Do not ${isFile ? "open this file" : "visit this URL"}.`,
        isFile ? "Delete the file immediately." : "Block access to this URL.",
        "Run a full security scan on your device.",
        "Update your antivirus software.",
      ]
    }
  }

  return (
    <div>
      <PageHeader title="Malware Detection" description="Scan files or URLs for potential malware threats" />

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="url">URL</TabsTrigger>
          <TabsTrigger value="file">File</TabsTrigger>
        </TabsList>
        <TabsContent value="url">
          <Card>
            <CardContent className="pt-6">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter URL to scan (e.g., https://example.com)"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                />
                <Button onClick={handleScanUrl} disabled={isScanning || !url.trim()}>
                  {isScanning ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    "Scan URL"
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="file">
          <Card>
            <CardContent className="pt-6">
              <div className="flex flex-col gap-4">
                <div className="flex items-center gap-2">
                  <Input
                    ref={fileInputRef}
                    type="file"
                    onChange={handleFileUpload}
                    disabled={isUploading || isScanning}
                    className="flex-1"
                  />
                  {(isUploading || isScanning) && (
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      {isUploading ? "Uploading..." : "Scanning..."}
                    </div>
                  )}
                </div>
                <p className="text-sm text-muted-foreground">
                  Max file size: 32MB. Supported file types: Most common file formats including executables, documents,
                  and archives.
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {error && (
        <ResultCard title="Scan Error" status="error">
          <p>{error}</p>
        </ResultCard>
      )}

      {result && (
        <ResultCard
          title={`Scan Result: ${result.riskLevel.charAt(0).toUpperCase() + result.riskLevel.slice(1)}`}
          status={getResultStatus()}
        >
          <div className="space-y-4">
            {result.file ? (
              <div className="flex items-start gap-3">
                <FileIcon className="h-8 w-8 mt-1 text-blue-500" />
                <div>
                  <h3 className="font-medium">{result.file.name}</h3>
                  <p className="text-sm text-muted-foreground">
                    {result.file.type} â€¢ {formatFileSize(result.file.size)}
                  </p>
                </div>
              </div>
            ) : (
              <div className="flex items-center gap-2 text-sm">
                <Globe className="h-4 w-4" />
                <a
                  href={result.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-500 hover:underline"
                >
                  {result.url}
                </a>
              </div>
            )}

            <div>
              <h3 className="font-medium">Risk Assessment</h3>
              <div className="mt-2 h-4 w-full bg-muted rounded-full overflow-hidden">
                <div
                  className={`h-full ${
                    result.riskScore < 5 ? "bg-green-500" : result.riskScore < 20 ? "bg-amber-500" : "bg-red-500"
                  }`}
                  style={{ width: `${result.riskScore}%` }}
                />
              </div>
              <div className="flex justify-between text-sm mt-1">
                <span>Clean (0%)</span>
                <span>Suspicious (10%)</span>
                <span>Malicious (20%+)</span>
              </div>
            </div>

            <div>
              <h3 className="font-medium">Detection Statistics</h3>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mt-2">
                <div className="bg-green-100 dark:bg-green-900/20 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <ShieldCheck className="h-4 w-4 text-green-500" />
                    <span className="text-sm font-medium">Clean</span>
                  </div>
                  <p className="text-2xl font-bold mt-1">{result.stats.harmless}</p>
                </div>
                <div className="bg-amber-100 dark:bg-amber-900/20 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-amber-500" />
                    <span className="text-sm font-medium">Suspicious</span>
                  </div>
                  <p className="text-2xl font-bold mt-1">{result.stats.suspicious}</p>
                </div>
                <div className="bg-red-100 dark:bg-red-900/20 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <ShieldAlert className="h-4 w-4 text-red-500" />
                    <span className="text-sm font-medium">Malicious</span>
                  </div>
                  <p className="text-2xl font-bold mt-1">{result.stats.malicious}</p>
                </div>
                <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">Undetected</span>
                  </div>
                  <p className="text-2xl font-bold mt-1">{result.stats.undetected}</p>
                </div>
              </div>
            </div>

            {result.detections && result.detections.length > 0 && (
              <div>
                <h3 className="font-medium">Detections ({result.detections.length})</h3>
                <div className="mt-2 max-h-60 overflow-y-auto border rounded-md">
                  <table className="min-w-full divide-y divide-border">
                    <thead>
                      <tr className="bg-muted/50">
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">Engine</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">Category</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">Result</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-border">
                      {result.detections.map((detection: any, index: number) => (
                        <tr key={index} className="hover:bg-muted/50">
                          <td className="px-4 py-2 text-sm">{detection.engine}</td>
                          <td className="px-4 py-2 text-sm">
                            <span
                              className={`px-2 py-0.5 rounded-full text-xs ${
                                detection.category === "malicious"
                                  ? "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200"
                                  : "bg-amber-100 text-amber-800 dark:bg-amber-900/20 dark:text-amber-200"
                              }`}
                            >
                              {detection.category}
                            </span>
                          </td>
                          <td className="px-4 py-2 text-sm">{detection.result}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {result.file && (
              <div>
                <h3 className="font-medium">File Hashes</h3>
                <div className="mt-2 grid gap-2">
                  <div className="grid grid-cols-[80px_1fr] gap-2">
                    <span className="text-sm font-medium">MD5:</span>
                    <code className="text-sm bg-muted px-1 rounded">{result.file.md5}</code>
                  </div>
                  <div className="grid grid-cols-[80px_1fr] gap-2">
                    <span className="text-sm font-medium">SHA-1:</span>
                    <code className="text-sm bg-muted px-1 rounded">{result.file.sha1}</code>
                  </div>
                  <div className="grid grid-cols-[80px_1fr] gap-2">
                    <span className="text-sm font-medium">SHA-256:</span>
                    <code className="text-sm bg-muted px-1 rounded">{result.file.sha256}</code>
                  </div>
                </div>
              </div>
            )}

            <div>
              <h3 className="font-medium">Recommendations</h3>
              <ul className="mt-2 list-disc pl-5 text-muted-foreground">
                {getRecommendations().map((rec, index) => (
                  <li key={index}>{rec}</li>
                ))}
              </ul>
            </div>

            <div className="text-sm text-muted-foreground">
              Last analyzed: {new Date(result.lastAnalysisDate).toLocaleString()}
            </div>
          </div>
        </ResultCard>
      )}
    </div>
  )
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 Bytes"

  const k = 1024
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"]
  const i = Math.floor(Math.log(bytes) / Math.log(k))

  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
}
